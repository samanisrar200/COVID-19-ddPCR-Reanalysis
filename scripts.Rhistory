install.packages(c("BiocManager", "bit", "cli", "commonmark", "cpp11", "curl", "diffobj", "evaluate", "fs", "generics", "gert", "ggplot2", "gh", "httpuv", "httr2", "jpeg", "jsonlite", "knitr", "later", "locfit", "MASS", "mime", "miniUI", "openssl", "pillar", "pkgbuild", "pkgdown", "processx", "promises", "ps", "purrr", "R6", "ragg", "Rcpp", "RCurl", "readxl", "restfulr", "rlang", "rprojroot", "RSQLite", "sass", "scales", "shiny", "stringi", "systemfonts", "textshaping", "tibble", "tinytex", "utf8", "vioplot", "waldo", "xfun", "XML", "xml2", "zip", "zoo"))
setwd("//wsl.localhost/Ubuntu/home/samanisrar200/covid-ddpcr-reanalysis/data/raw")
getwd()
mat <- readRDS("GSE150728_RAW/GSM4557327_555_1_cell.counts.matrices.rds.gz")
con <- gzcon(file("GSE150728_RAW/GSM4557327_555_1_cell.counts.matrices.rds.gz", "rb"))
mat <- readRDS(con)
library(readr)
install.packages(c("BiocManager", "Matrix"))
BiocManager::install("DropletUtils")
library(DropletUtils)
class(sce)
BiocManager::install("beachmat")
library(DropletUtils)
f <- "GSE150728_RAW/GSM4557327_555_1_cell.counts.matrices.rds.gz"
sce <- read10xCounts(f)
sce <- readRDS(gzfile("GSE150728_RAW/GSM4557327_555_1_cell.counts.matrices.rds.gz"))
if (!requireNamespace("Seurat", quietly = TRUE)) {
install.packages("Seurat")
}
library(Seurat)
f <- "GSE150728_RAW/GSM4557327_555_1_cell.counts.matrices.rds.gz"
obj <- readRDS(gzfile(f))
mat <- readRDS("GSM4557327_555_1_cell.counts.matrices.rds")
mat <- readRDS("GSM4557327_555_1_cell.counts.matrices.rds")
getwd()
mat <- readRDS("GSE150728_RAW/GSM4557327_555_1_cell.counts.matrices.rds")
setwd("//wsl.localhost/Ubuntu/home/samanisrar200/covid-ddpcr-reanalysis/data/raw/GSE150728_RAW")
mat <- readRDS("GSM4557327_555_1_cell.counts.matrices.rds")
getwd()
mat <- readRDS("GSM4557327_555_1_cell.counts.matrices.rds")
dim(mat)
head(mat)
class(mat)
install.packages("Seurat")
library(Seurat)
install.packages("Seurat")
seurat_obj <- CreateSeuratObject(counts = mat, project = "COVID_ddPCR")
seurat_obj <- NormalizeData(seurat_obj)
seurat_obj <- FindVariableFeatures(seurat_obj)
seurat_obj <- ScaleData(seurat_obj)
seurat_obj <- RunPCA(seurat_obj)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:20)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:20)
DimPlot(seurat_obj, reduction = "umap")
objs <- lapply(all_data, CreateSeuratObject)
files <- list.files(path = "GSE150728_RAW", pattern = "*.rds$", full.names = TRUE)
files
getwd()
files <- list.files(pattern = "\\.rds$", full.names = TRUE)
files
mat <- readRDS(files[1])
class(mat)
str(mat)
library(Seurat)
seurat_obj <- CreateSeuratObject(counts = mat, project = "COVID_ddPCR")
seurat_obj
# Calculate percent mitochondrial genes
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
VlnPlot(seurat_obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize", scale.factor = 10000)
seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(seurat_obj)
seurat_obj <- ScaleData(seurat_obj, features = all.genes)
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj))
seurat_obj <- ScaleData(seurat_obj, features = VariableFeatures(seurat_obj))
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(seurat_obj))
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(seurat_obj))
ElbowPlot(seurat_obj)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:20)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:20)
DimPlot(seurat_obj, reduction = "umap", label = TRUE)
cluster_markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(cluster_markers)
all.genes <- rownames(seurat_obj)
seurat_obj <- ScaleData(seurat_obj, features = all.genes)
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(seurat_obj))
seurat_obj <- ScaleData(seurat_obj, features = VariableFeatures(seurat_obj))
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(seurat_obj))
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:20)  # adjust dims based on ElbowPlot
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:20)
DimPlot(seurat_obj, reduction = "umap", label = TRUE)
cluster_markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(cluster_markers)
seurat_obj <- ScaleData(seurat_obj, features = VariableFeatures(seurat_obj))
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(seurat_obj))
print(seurat_obj[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(seurat_obj, dims = 1:2, reduction = "pca")
ElbowPlot(seurat_obj)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10)  # adjust dims based on ElbowPlot
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)
DimPlot(seurat_obj, reduction = "umap", label = TRUE)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:20)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:20)
DimPlot(seurat_obj, reduction = "umap", label = TRUE)
markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(markers)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)
table(Idents(seurat_obj))
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)
DimPlot(seurat_obj, reduction = "umap", label = TRUE)
markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(markers)
VariableFeatures(seurat_obj)
seurat_obj <- JoinLayers(seurat_obj)
markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(markers)
library(dplyr)
top10 <- markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
library(Seurat)
DoHeatmap(seurat_obj, features = top10$gene) + NoLegend()
DoHeatmap(seurat_obj, features = top10$gene, slot = "counts")
valid.genes <- top10$gene[top10$gene %in% rownames(seurat_obj)]
DoHeatmap(seurat_obj, features = valid.genes) + NoLegend()
cluster.ids <- c("0"="Monocytes", "1"="T cells", "2"="B cells", ...)  # assign based on markers
cluster0_vs_1 <- FindMarkers(seurat_obj, ident.1 = 0, ident.2 = 1)
head(cluster0_vs_1)
Idents(seurat_obj) <- seurat_obj$seurat_clusters
list.files(pattern = "rds$")
seurat_obj <- CreateSeuratObject(counts = data, project = "MyProject")
counts <- readRDS("GSM4557327_555_1_cell.counts.matrices.rds")
class(counts)
names(counts)
kibrary(Seurat)
library(Seurat)
counts_exon <- sounts$exon
counts_exon <- counts$exon
seurat_obj <- CreateSeuratObject(counts = counts_exon, project = "COVID_ddPCR", min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
VlnPlot(seurat_obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
head(rownames(seurat_obj))
grep("^MT-", rownames(seurat_obj), value = TRUE)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
VlnPlot(seurat_obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
grep("^MT-", rownames(seurat_obj), value = TRUE)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
VlnPlot(seurat_obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 &
nFeature_RNA < 6000 &
percent.mt < 15)
FeatureScatter(seurat_obj, feature1 = "nCount_RNA", feature2 = "percent.mt") +
FeatureScatter(seurat_obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seurat_obj <- subset(seurat_obj,
subset = nFeature_RNA > 200 &
nFeature_RNA < 6000 &
percent.mt < 15)
seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize", scale.factor = 10000)
seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(seurat_obj), 10)
VariableFeaturePlot(seurat_obj)
LabelPoints(plot = VariableFeaturePlot(seurat_obj), points = top10, repel = TRUE)
dev.off()   # resets plotting device
plot1 <- VariableFeaturePlot(seurat_obj)
LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0)
dev.off()  # closes the current graphics device
windows()
x11()
plot1 <- VariableFeaturePlot(seurat_obj)
LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0)
seurat_obj <- ScaleData(seurat_obj, features = rownames(seurat_obj))
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj))
print(seurat_obj[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(seurat_obj, dims = 1:2, reduction = "pca")
DimPlot(seurat_obj, reduction = "pca")
DimHeatmap(seurat_obj, dims = 1, cells = 500, balanced = TRUE)
ElbowPlot(seurat_obj)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)
DimPlot(seurat_obj, reduction = "umap", label = TRUE)
table(Idents(seurat_obj))
cluster_markers <- FindAllMarkers(seurat_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(cluster_markers)
top10 <- cluster_markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
top10 <- do.call(rbind, lapply(split(cluster_markers, cluster_markers$cluster),
function(x) head(x[order(-x$avg_log2FC), ], 10)))
oHeatmap(seurat_obj, features = top10$gene) + NoLegend()
DoHeatmap(seurat_obj, features = top10$gene) + NoLegend()
FeaturePlot(seurat_obj, features = c("CD3D", "MS4A1", "NKG7", "CD14", "LYZ", "PPBP"))
saveRDS(seurat_obj, file = "seurat_obj_final.rds")
write.csv(cluster_markers, "cluster_markers.csv")
install.packages("BiocManager")
BiocManager::install(c("clusterProfiler", "org.Hs.eg.db"))
library(clusterProfiler)
library(org.Hs.eg.db)
cluster0_markers <- cluster_markers %>%
filter(cluster == 0 & p_val_adj < 0.05) %>%
pull(gene)
library(dplyr)
cluster0_markers <- cluster_markers %>%
filter(cluster == 0 & p_val_adj < 0.05) %>%
pull(gene)
library(clusterProfiler)
library(org.Hs.eg.db)
library(dplyr)
clusters <- unique(cluster_markers$cluster)
go_results <- list()
for (cl in clusters) {
genes <- cluster_markers %>%
filter(cluster == cl & p_val_adj < 0.05 & avg_log2FC > 0.25) %>%
pull(gene)
gene_ids <- bitr(genes, fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
if (!is.null(gene_ids) && nrow(gene_ids) > 0) {
ego <- enrichGO(gene          = gene_ids$ENTREZID,
OrgDb         = org.Hs.eg.db,
keyType       = "ENTREZID",
ont           = "BP",    # Biological Process
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05)
go_results[[paste0("Cluster_", cl)]] <- ego
}
}
head(go_results[["Cluster_0"]]@result)
dotplot(go_results[["Cluster_0"]], showCategory = 10) + ggtitle("Cluster 0 - GO BP")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
ggplot(data = your_data, aes(x = variable1, y = variable2)) +
geom_point() +
ggtitle("Cluster 0 - GO BP")
dotplot(go_results[["Cluster_0"]], showCategory = 10) + ggtitle("Cluster 0 - GO BP")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
library(clusterProfiler)
dotplot(go_results[["Cluster_0"]], showCategory = 10)
head(go_results[["Cluster_1"]]@result)
dotplot(go_results[["Cluster_0"]], showCategory = 10) + ggtitle("Cluster 0 - GO BP")
head(go_results[["Cluster_1"]]@result)
dotplot(go_results[["Cluster_1"]], showCategory = 10) + ggtitle("Cluster 1 - GO BP")
head(go_results[["Cluster_2"]]@result)
dotplot(go_results[["Cluster_2"]], showCategory = 10) + ggtitle("Cluster 2 - GO BP")
head(go_results[["Cluster_3"]]@result)
dotplot(go_results[["Cluster_3"]], showCategory = 10) + ggtitle("Cluster 3 - GO BP")
head(go_results[["Cluster_4"]]@result)
dotplot(go_results[["Cluster_4"]], showCategory = 10) + ggtitle("Cluster 4 - GO BP")
head(go_results[["Cluster_5"]]@result)
dotplot(go_results[["Cluster_5"]], showCategory = 10) + ggtitle("Cluster 5 - GO BP")
head(go_results[["Cluster_6"]]@result)
dotplot(go_results[["Cluster_6"]], showCategory = 10) + ggtitle("Cluster 6 - GO BP")
head(go_results[["Cluster_7"]]@result)
dotplot(go_results[["Cluster_7"]], showCategory = 10) + ggtitle("Cluster 7 - GO BP")
head(go_results[["Cluster_8"]]@result)
dotplot(go_results[["Cluster_8"]], showCategory = 10) + ggtitle("Cluster 8 - GO BP")
head(go_results[["Cluster_9"]]@result)
dotplot(go_results[["Cluster_9"]], showCategory = 10) + ggtitle("Cluster 9 - GO BP")
head(go_results[["Cluster_10"]]@result)
dotplot(go_results[["Cluster_10"]], showCategory = 10) + ggtitle("Cluster 10 - GO BP")
head(go_results[["Cluster_11"]]@result)
head(go_results[["Cluster_12"]]@result)
s.genes <- cc.genes$s.genes
seurat_obj <- CellCycleScoring(seurat_obj,
s.features = s.genes,
g2m.features = g2m.genes,
set.ident = TRUE)
install.packages("Seurat")
library(Seurat)
s.genes <- cc.genes.updated.2019$s.genes
g2m.genes <- cc.genes.updated.2019$g2m.genes
data("cc.genes")
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
seurat_obj <- CellCycleScoring(seurat_obj,
s.features = s.genes,
g2m.features = g2m.genes,
set.ident = TRUE)
library(ggplot2)  # Ensure ggplot2 is loaded for ggtitle
DimPlot(seurat_obj, group.by = "Phase") + ggtitle("Cell Cycle Phase Distribution")
